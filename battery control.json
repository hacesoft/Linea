[{"id":"7996ac9a8ad2ee7a","type":"tab","label":"Battery Control","disabled":false,"info":"//*****************************************************************************\r\n//\r\n// File Name        : Battery Control Node\r\n// Title            : Battery Control Nodes\r\n// Author           : http://www.prochazka.zde.cz -> hacesoft 2024\r\n// Created          : 21-06-2024, 08:00\r\n// Revised          : 29-06-2024, 21:39\r\n// Version          : 1.00\r\n// Target Platfirm  : Node-RED\r\n//\r\n// This code is distributed under the GNU Public License\r\n// Vsechny informace jsou zahrnuty pod GPL licenci, pokud není explicitne uveden jiný typ licence.\r\n// Pouzivání techto stránek a produktů ke komerčním �celum lze jen se souhlasem autora.\r\n// Vsechna práva vyhrazena (c) 1997 - 2024 hacesoft.\r\n//\r\n//*****************************************************************************","env":[]},{"id":"4ef9e70b2ecc71c2","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"AC Consumption L1","topic":"phase1","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"InputRegister","adr":"817","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":false,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":250,"y":240,"wires":[["cec600dec1d94bfd"],["1f5e9abebc20c462"]]},{"id":"ef6e0f1613b3a5d3","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"AC Consumption L2","topic":"phase2","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"InputRegister","adr":"818","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":false,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":250,"y":280,"wires":[["cec600dec1d94bfd"],["1f5e9abebc20c462"]]},{"id":"45f60e36c74c2ecd","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"AC Consumption L3","topic":"phase3","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"InputRegister","adr":"819","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":false,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":250,"y":320,"wires":[["cec600dec1d94bfd"],["1f5e9abebc20c462"]]},{"id":"1f5e9abebc20c462","type":"modbus-response","z":"7996ac9a8ad2ee7a","name":"","registerShowMax":"50","x":590,"y":340,"wires":[]},{"id":"3115d0ce2030ec6f","type":"function","z":"7996ac9a8ad2ee7a","name":"AC LOAD","func":"//*****************************************************************************\n//\n// File Name        : GUI\n// Title            : GUI\n// Author           : http://www.prochazka.zde.cz -> hacesoft 2024\n// Created          : 20-06-2024, 11:00\n// Revised          : 29-06-2024\n// Version          : 1.00\n// Target Platfirm  : Node-RED\n//\n// This code is distributed under the GNU Public License\n// Vsechny informace jsou zahrnuty pod GPL licenci, pokud není explicitne uveden jiný typ licence.\n// Pouzivání techto stránek a produktů ke komerčním �celum lze jen se souhlasem autora.\n// Vsechna práva vyhrazena (c) 1997 - 2024 hacesoft.\n//\n//*****************************************************************************\n\ntry {\n    // Debugging flag\n    const debug = false;  // Nastavte na true pro zapnutí debug zpráv\n\n    const nRezerva = 230;\n    let nSet_Grid_Point = 0;\n\n    // Definice fazi AC LOAD\n    const phase1 = parseFloat(msg.payload.phase1)|| 0;  // Hodnota z registru 817\n    const phase2 = parseFloat(msg.payload.phase2)|| 0;  // Hodnota z registru 818\n    const phase3 = parseFloat(msg.payload.phase3)|| 0;  // Hodnota z registru 819\n   \n   // Definice Gridu\n    const grid1 = nConvertSignetUnsignet(parseFloat(msg.payload.grid1))|| 0;  // Hodnota z registru 811\n    const grid2 = nConvertSignetUnsignet(parseFloat(msg.payload.grid2))|| 0;  // Hodnota z registru 812\n    const grid3 = nConvertSignetUnsignet(parseFloat(msg.payload.grid3))|| 0;  // Hodnota z registru 813\n\n    \n\n    // Definice vyroby FV panelu\n    let pvPower = parseFloat(msg.payload.totalPVPower)|| 0;  // Hodnota z registru 819\n\n    // Definice stavu nabiti baterie\n    let nBattery_State_Charge = parseFloat(msg.payload.nBattery_State_Charge)|| 0;  // Hodnota z registru 843\n\n    // Pole dnesniho spotu\n    const todayHourlyPrices = global.get(\"todayHourlyPrices\");\n\n\n    //Ulozeni dat do globalnich promennych, ktere jsou dostupne mezi flow\n    global.set(\"phase1\", phase1);\n    global.set(\"phase2\", phase2);\n    global.set(\"phase3\", phase3);\n    global.set(\"pvPower\", pvPower);\n    global.set(\"nBattery_State_Charge\", nBattery_State_Charge);\n    global.set(\"grid1\", grid1);\n    global.set(\"grid2\", grid2);\n    global.set(\"grid3\", grid3);\n\n\n    // Načteni globalnich dat\n    const nGridConsumptionEnable = global.get(\"nGridConsumptionEnable\")|| 0; // true znamena zapnut přepinač NUCENY ODBER Z GRIDu\n    const nSetGridValue = global.get(\"nSetGridValue\")|| 0; // Hodnota sítoveho odberu\n    const isSpotAutoCtrlEnabled = global.get(\"isSpotAutoCtrlEnabled\")|| 0; // true znamená Automaticky podle SPOTu\n    const spotTresholdPrice = global.get(\"spotTresholdPrice\")|| 0; // Limitni cena\n    const currentPrice = global.get(\"currentPrice\")|| 0; // Aktualni SPOT cena\n    const nPretoky = global.get(\"nPretoky\")|| 0; // Pretoky povoleny- true, zakazany - false\n    const switchDelayCharging = global.get(\"switchDelayCharging\")|| 0; // true znamena ze je aktivovana funkce posunuti nabijeni baterie\n    const tDefaultTimeStart = global.get(\"tDefaultTimeStart\")|| 0; // Defaultni cas zacatku posunuti nabijeni beterie\n    const tStartBattery = global.get(\"tStartBattery\")|| 0; // Zadany cas start posunu nabijeni beterie\n    const tStopBattery = global.get(\"tStopBattery\") || 0; // Zadany cas stop posunu nabijeni beterie\n\n    const nMorningPeakBatterySales = global.get(\"nMorningPeakBatterySales\") || 0; // Switch Prodej baterie v ranní špičce\n    const nEveningPeakBatterySales = global.get(\"nEveningPeakBatterySales\") || 0; // Switch Prodej baterie ve večerní špičce\n    const nMorningSOC_sales = global.get(\"nMorningSOC_sales\") || 0; // Procenta - Prodej Rano do SOC\n    const nEveningSOC_sales = global.get(\"nEveningSOC_sales\") || 0; // Procenta - Prodej Večer do SOC\n\n    const currentTime = new Date(); // aktualni cas\n    const sDate = currentTime.toLocaleString(\"cs-CZ\", { timeZone: \"Europe/Prague\" }); // prida CZ lokaci\n\n    const oDate_CZ = sExtractTime(removeSpacesAroundDots(sDate)); // upravi stavajici obekt cas na prijatelnou podobu pro porovnavani\n\n    const tStartBatteryTime = mExtractTime(tStartBattery); // vstupni promenna je jen milisekundy a nejde porovnavat s aktualnim casem, tak opet uprava na prijatelnou podobu pro porovnavani.\n    const tStopBatteryTime = mExtractTime(tStopBattery);\n\n    /************************************************************************************************** */\n\n    // Spočítat celkový odběr AC zátěže\n    let totalACLoad = phase1 + phase2 + phase3;\n\n    // Hleda ranni a odpoleni peaky\n    // prvni promenna je pole aktualniho spot a druha promenna rika jak dlouhy peak muse bejt\n    const morningPeak1 = findMorningPeakHours(todayHourlyPrices, 2);\n    const afternoonPeak1 = findAfternoonPeakHours(todayHourlyPrices, 2);\n\n    // Debugging\n    if (debug) {\n        node.warn(\"global.get(todayHourlyPrices): \" + todayHourlyPrices);\n        node.warn(\"global.get(morningPeak1): \" + morningPeak1);\n        node.warn(\"global.get(afternoonPeak1): \" + afternoonPeak1);\n    }\n\n    nSet_Grid_Point = fSet_Grid(nGridConsumptionEnable, nSetGridValue, isSpotAutoCtrlEnabled, spotTresholdPrice, currentPrice, nPretoky);    \n\n    let nZbytekFV = pvPower - (totalACLoad + nRezerva);\n\n    // funkce na posun nabijeni baterii\n    if (tStartBatteryTime && tStopBatteryTime) {\n        if (debug) {\n            node.warn(\"tStartBattery: \" + tStartBatteryTime);\n            node.warn(\"tStopBattery: \" + tStopBatteryTime);\n            node.warn(\"oDate_CZ: \" + oDate_CZ);\n        }\n        if (switchDelayCharging == true) { // true znamena ze je aktivovana funkce posunuti nabijeni baterie\n            if (nPretoky == true) { // povolene pretoky\n                if (oDate_CZ >= tStartBatteryTime && oDate_CZ <= tStopBatteryTime) { // Aktuální čas je v rozsahu\n                    if (nZbytekFV > 0) { // Prebytek FV je kladna hodnota\n                        nSet_Grid_Point = - nZbytekFV; // prevest na zapornou hodnotu\n                    } else { // mala vyroba z FV panelu\n                        nSet_Grid_Point = 0;\n                    }\n                } else { // Aktuální čas je mimo rozsah\n                    // nSet_Grid_Point = fSet_Grid (nGridConsumptionEnable, nSetGridValue, isSpotAutoCtrlEnabled, spotTresholdPrice, currentPrice, nPretoky);    \n                }\n            } else { // Čas začátku nebo konce není nastaven\n                nSet_Grid_Point = 0;\n            }\n        }\n    }\n\n    // Nastavit celkový odběr jako nový payload\n    msg.payload.totalACLoad = totalACLoad;\n    msg.payload.pvPower = pvPower;\n    msg.payload.nZbytekFV = nZbytekFV;\n    msg.payload.nSet_Grid_Point = nSet_Grid_Point;\n\n    // Vrátit zprávu s celkovým odběrem\n    return msg;\n\n} catch (error) {\n    node.error(\"Chyba: \" + error.message, msg);\n    return null; // Zastaví další zpracování, pokud dojde k chybě\n}\n\n// funkce nastavuje GridPoint podle zadane hodnoty\nfunction fSet_Grid(nGridConsumptionEnable, nSetGridValue, isSpotAutoCtrlEnabled, spotTresholdPrice, currentPrice, nPretoky) {\n    let nSetGridPoint = 0;\n\n    if (currentPrice > 0) { // Dokud neni zaporný spot\n        if (nGridConsumptionEnable == true) { // zapnuy nuceny odber z Gridu\n            // if(spotTresholdPrice <= currentPrice) // aktualni cena je rovne nebo vetsi nastavena limitni cena\n            nSetGridPoint = nSetGridValue;\n        }\n    }\n    return nSetGridPoint; \n}\n\nfunction removeSpacesAroundDots(inputString) {\n    return inputString.replace(/ \\. /g, '.').replace(/\\. /g, '.').replace(/ \\./g, '.');\n}\n\n// prevod string to date object\nfunction sExtractTime(dateString) {\n    let parts = dateString.split(' ');\n    let timeParts = parts[1].split(':');\n\n    let date = new Date(\n        2024, // rok\n        6, // měsíc (od 0 do 11)\n        23, // den\n        parseInt(timeParts[0], 10), // hodina\n        parseInt(timeParts[1], 10), // minuta\n        parseInt(timeParts[2], 10) // sekunda\n    );\n\n    return date;\n}\n\nfunction mExtractTime(milliseconds) {\n    let date = new Date(milliseconds);\n    return new Date(\n        2024, // rok\n        6, // měsíc (od 0 do 11)\n        23, // den\n        date.getHours(), // hodina\n        date.getMinutes(), // minuta\n        date.getSeconds(), // sekunda\n        date.getMilliseconds() // milisekunda\n    );\n}\n\n// Tato funkce vypočítá medián zadaných hodnot\nfunction calculateMedian(values) {\n    values = values.slice().sort((a, b) => a - b);\n    const mid = Math.floor(values.length / 2);\n\n    if (values.length % 2 === 0) {\n        return (values[mid - 1] + values[mid]) / 2;\n    } else {\n        return values[mid];\n    }\n}\n\n// Tyto funkce používají calculateMedian k určení prahové hodnoty pro ranní a odpolední hodiny\nfunction findMorningPeakHours(hourlyValues, maxPeakLength = 3) {\n    if (hourlyValues.length !== 24) {\n        throw new Error('Array must contain exactly 24 elements.');\n    }\n\n    const peakThreshold = calculateMedian(hourlyValues.slice(0, 12));\n    let morningPeakHours = [];\n\n    // Najít ranní špičku (0-11 hodin)\n    for (let i = 0; i < 12; i++) {\n        if (hourlyValues[i] >= peakThreshold) {\n            morningPeakHours.push(i);\n        }\n    }\n\n    return findContinuousBlocks(morningPeakHours, maxPeakLength, hourlyValues);\n}\n\nfunction findAfternoonPeakHours(hourlyValues, maxPeakLength = 3) {\n    if (hourlyValues.length !== 24) {\n        throw new Error('Array must contain exactly 24 elements.');\n    }\n\n    const peakThreshold = calculateMedian(hourlyValues.slice(12, 24));\n    let afternoonPeakHours = [];\n\n    // Najít večerní špičku (12-23 hodin)\n    for (let i = 12; i < 24; i++) {\n        if (hourlyValues[i] >= peakThreshold) {\n            afternoonPeakHours.push(i);\n        }\n    }\n\n    return findContinuousBlocks(afternoonPeakHours, maxPeakLength, hourlyValues);\n}\n\n// Tato funkce zjišťuje souvislé bloky hodin v daném poli a vrací nejdelší blok nebo prázdné pole\nfunction findContinuousBlocks(hoursArray, maxPeakLength, values) {\n    let blocks = [];\n    let currentBlock = [];\n\n    for (let i = 0; i < hoursArray.length; i++) {\n        if (currentBlock.length === 0) {\n            currentBlock.push(hoursArray[i]);\n        } else if (hoursArray[i] === currentBlock[currentBlock.length - 1] + 1) {\n            currentBlock.push(hoursArray[i]);\n        } else {\n            blocks.push(currentBlock);\n            currentBlock = [hoursArray[i]];\n        }\n    }\n\n    if (currentBlock.length > 0) {\n        blocks.push(currentBlock);\n    }\n\n    // Najít nejdelší blok nebo vrátit prázdné pole, s maximální délkou bloku\n    let longestBlock = blocks.reduce((a, b) => (a.length > b.length ? a : b), []);\n\n    if (longestBlock.length > maxPeakLength) {\n        let bestBlock = longestBlock.slice(0, maxPeakLength);\n        let bestAvg = calculateAverage(bestBlock, values);\n\n        for (let i = 1; i <= longestBlock.length - maxPeakLength; i++) {\n            let currentBlock = longestBlock.slice(i, i + maxPeakLength);\n            let currentAvg = calculateAverage(currentBlock, values);\n\n            if (currentAvg > bestAvg) {\n                bestBlock = currentBlock;\n                bestAvg = currentAvg;\n            }\n        }\n\n        return bestBlock;\n    } else {\n        return longestBlock;\n    }\n}\n\n// Tato funkce vypočítá průměrnou hodnotu pro daný blok hodin\nfunction calculateAverage(block, values) {\n    let sum = block.reduce((acc, hour) => acc + values[hour], 0);\n    return sum / block.length;\n}\n\n//Convert Function Number Signet To Unsignet\nfunction nConvertSignetUnsignet(nNumber) {\n    if (nNumber > 32767) nNumber -= 65536; \nreturn nNumber;\n}","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":680,"y":260,"wires":[["e3e693e4b61850ee","9a1f2f8805f543fb","3f208915524075da","f3d65ae8e65e4ac6","ba14073142dc8d0a"]]},{"id":"e3e693e4b61850ee","type":"debug","z":"7996ac9a8ad2ee7a","name":"AC LOAD","active":false,"tosidebar":true,"console":false,"tostatus":true,"complete":"payload.totalACLoad","targetType":"msg","statusVal":"payload","statusType":"auto","x":860,"y":60,"wires":[]},{"id":"cec600dec1d94bfd","type":"join","z":"7996ac9a8ad2ee7a","name":"AC CON.","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"1","count":"8","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":510,"y":260,"wires":[["3115d0ce2030ec6f"]]},{"id":"c7a153a07781cdf5","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"READ ESS control loop setpoint","topic":"","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"InputRegister","adr":"2700","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":false,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":290,"y":480,"wires":[["394228e3099e5995"],["1f5e9abebc20c462"]]},{"id":"1f78db0fc7ca1706","type":"debug","z":"7996ac9a8ad2ee7a","name":"GRID POINT","active":false,"tosidebar":true,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"payload","statusType":"auto","x":850,"y":480,"wires":[]},{"id":"394228e3099e5995","type":"function","z":"7996ac9a8ad2ee7a","name":"Prevod signet na unsignet","func":"var value = msg.payload; \nif (value > 32767) value -= 65536; \nmsg.payload = value;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":630,"y":480,"wires":[["1f78db0fc7ca1706","cdbb430a58676409"]]},{"id":"ab5ff1b4c5a7c628","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"Total PV Power","topic":"totalPVPower","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"InputRegister","adr":"850","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":false,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":240,"y":400,"wires":[["cec600dec1d94bfd"],["1f5e9abebc20c462"]]},{"id":"9a1f2f8805f543fb","type":"debug","z":"7996ac9a8ad2ee7a","name":"pvPower","active":false,"tosidebar":true,"console":false,"tostatus":true,"complete":"payload.pvPower","targetType":"msg","statusVal":"payload. pvPower","statusType":"auto","x":860,"y":120,"wires":[]},{"id":"3f208915524075da","type":"debug","z":"7996ac9a8ad2ee7a","name":"nZbytekFV","active":false,"tosidebar":true,"console":false,"tostatus":true,"complete":"payload.nZbytekFV","targetType":"msg","statusVal":"payload","statusType":"auto","x":870,"y":180,"wires":[]},{"id":"4fa928a26e09c60d","type":"modbus-write","z":"7996ac9a8ad2ee7a","name":"WRITE ESS control loop setpoint","showStatusActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"HoldingRegister","adr":"2700","quantity":"1","server":"5e730295abd379ae","emptyMsgOnFail":false,"keepMsgProperties":false,"delayOnStart":false,"startDelayTime":"","x":1200,"y":300,"wires":[[],["868a11fddbae10cd"]]},{"id":"868a11fddbae10cd","type":"modbus-response","z":"7996ac9a8ad2ee7a","name":"","registerShowMax":"5","x":1470,"y":300,"wires":[]},{"id":"ba14073142dc8d0a","type":"function","z":"7996ac9a8ad2ee7a","name":"Prevod signet na unsignet","func":"var value = msg.payload.nSet_Grid_Point; \nvalue = value | 0; \nif (value < 0) value += 65536; \nmsg.payload = value;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":300,"wires":[["2ef53d56057d98bc","4fa928a26e09c60d"]]},{"id":"2ef53d56057d98bc","type":"debug","z":"7996ac9a8ad2ee7a","name":"debug 7","active":false,"tosidebar":true,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"payload","statusType":"auto","x":1140,"y":220,"wires":[]},{"id":"f3d65ae8e65e4ac6","type":"debug","z":"7996ac9a8ad2ee7a","name":"nSet_Grid_Point","active":false,"tosidebar":true,"console":false,"tostatus":true,"complete":"payload.nSet_Grid_Point","targetType":"msg","statusVal":"payload","statusType":"auto","x":880,"y":240,"wires":[]},{"id":"cdbb430a58676409","type":"ui_text","z":"7996ac9a8ad2ee7a","group":"b1eb05edab318eb0","order":1,"width":6,"height":1,"name":"","label":"Cerbo ESS control loop setpoint","format":"<font color={{fcolor}}>{{msg.payload}}","layout":"row-spread","className":"Kulati_Nahore","style":true,"font":"","fontSize":"16","color":"#0084ff","x":910,"y":420,"wires":[]},{"id":"fe4b662be5a55416","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"Battery State of Charge","topic":"nBattery_State_Charge","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"HoldingRegister","adr":"843","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":true,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":260,"y":180,"wires":[["cec600dec1d94bfd"],["1f5e9abebc20c462"]]},{"id":"579d1b1761410efc","type":"catch","z":"7996ac9a8ad2ee7a","name":"Catch Errors","scope":["868a11fddbae10cd","3115d0ce2030ec6f","e3e693e4b61850ee"],"uncaught":false,"x":230,"y":80,"wires":[["e29bc9e03cf59245"]]},{"id":"e29bc9e03cf59245","type":"debug","z":"7996ac9a8ad2ee7a","name":"Debug Errors","active":true,"tosidebar":true,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"payload","statusType":"auto","x":530,"y":80,"wires":[]},{"id":"945ee483a66e0df2","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"GRID L1","topic":"grid1","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"InputRegister","adr":"820","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":false,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":220,"y":560,"wires":[["cec600dec1d94bfd"],["1f5e9abebc20c462"]]},{"id":"56ad64547e499cf0","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"GRID L2","topic":"grid2","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"InputRegister","adr":"821","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":false,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":220,"y":620,"wires":[["cec600dec1d94bfd"],["1f5e9abebc20c462"]]},{"id":"f7a0a85aa9e9b556","type":"modbus-read","z":"7996ac9a8ad2ee7a","name":"GRID L3","topic":"grid3","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"showWarnings":true,"unitid":"100","dataType":"InputRegister","adr":"822","quantity":"1","rate":"1","rateUnit":"s","delayOnStart":false,"startDelayTime":"10","server":"5e730295abd379ae","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":220,"y":680,"wires":[["cec600dec1d94bfd"],["1f5e9abebc20c462"]]},{"id":"5e730295abd379ae","type":"modbus-client","name":"Cebro GX","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":false,"queueLogEnabled":false,"failureLogEnabled":false,"tcpHost":"192.168.50.200","tcpPort":"502","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","serialAsciiResponseStartDelimiter":"0x3A","unit_id":1,"commandDelay":1,"clientTimeout":1000,"reconnectOnTimeout":false,"reconnectTimeout":2000,"parallelUnitIdsAllowed":false,"showErrors":false,"showWarnings":true,"showLogs":true},{"id":"b1eb05edab318eb0","type":"ui_group","name":"ESS","tab":"f3a8a67ff0904e39","order":4,"disp":true,"width":"6","collapse":true,"className":""},{"id":"f3a8a67ff0904e39","type":"ui_tab","name":"FVE","icon":"dashboard","order":1,"disabled":false,"hidden":false}]